spring.application.name=springKafka
spring.datasource.url = jdbc:postgresql://host.docker.internal:5432/postgres  
#to connect to the localhost where the container is running because the postgres database is running there.
spring.datasource.username = postgres
spring.datasource.password = 123456789

#logging.level.org.springframework=DEBUG
spring.jpa.hibernate.ddl-auto=create

#spring.cloud.config.uri=http://localhost:8888
#spring.config.import=optional:configserver:http://localhost:8888



server.port=8090
inventoryUrl=http://localhost:9095/inventory
springKafka.service.url=http://springKafka-server:8090
springKafka.service.timeout=5000


#kafka
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

resilience4j.circuitbreaker.instances.inventoryServiceCircuitBreaker.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventoryServiceCircuitBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventoryServiceCircuitBreaker.waitDurationInOpenState=10000
resilience4j.circuitbreaker.instances.inventoryServiceCircuitBreaker.permittedNumberOfCallsInHalfOpenState=10
resilience4j.circuitbreaker.instances.inventoryServiceCircuitBreaker.slidingWindowSize=100
resilience4j.circuitbreaker.instances.inventoryServiceCircuitBreaker.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.inventoryServiceCircuitBreaker.slidingWindowType=COUNT_BASED


management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=*
logging.level.io.github.resilience4j.circuitbreaker=DEBUG
